{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"After-Effects \u00b6 An Effortless & Simple post-installation script for Ubuntu, Linux Mint, Elementary, Debian and their derivatives. This script is built for one purpose only. Automating Post Installation tasks on a Fresh Ubuntu/Debian Installation. How \u00b6 Step 1: Get the script and Verify its integrity \u00b6 wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/after-effects -O after-effects wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/sha256sums.txt -O sha256sums.txt sha256sum -c sha256sums.txt --strict Step 2: Update the config to suit your needs \u00b6 Update the config file to suit your needs. Please see Configuration & Tasks for more details. Some example configs can be found here . Step 3: Run it \u00b6 Run the script as root . You will get an error if you do not run the script as root. chmod +x after-effects sudo ./after-effects -C <your config.yml> Supported Distros \u00b6 I have not tested the script on following distros. Because they use ubuntu as their base, It should work fine. But no promises. Tip Please check Supported-Distros for complete list of supported distributions. Features \u00b6 Adding Repositories (Limited set of curated repositories only) Installing packages from system repositories Installing statically linked binaries Remove Preinstalled packages Install PIP packages. (Its highly recommended to use virtualenv for your projects, ONLY install pip packages which are absolutely essential.) Add PPAs (Ubuntu & Ubuntu derivatives only) Debian [DEB] packages Snap packages Screenshots \u00b6","title":"Home"},{"location":"#after-effects","text":"An Effortless & Simple post-installation script for Ubuntu, Linux Mint, Elementary, Debian and their derivatives. This script is built for one purpose only. Automating Post Installation tasks on a Fresh Ubuntu/Debian Installation.","title":"After-Effects"},{"location":"#how","text":"","title":"How"},{"location":"#step-1-get-the-script-and-verify-its-integrity","text":"wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/after-effects -O after-effects wget https://github.com/tprasadtp/ubuntu-post-install/releases/latest/download/sha256sums.txt -O sha256sums.txt sha256sum -c sha256sums.txt --strict","title":"Step 1: Get the script and Verify its integrity"},{"location":"#step-2-update-the-config-to-suit-your-needs","text":"Update the config file to suit your needs. Please see Configuration & Tasks for more details. Some example configs can be found here .","title":"Step 2: Update the config to suit your needs"},{"location":"#step-3-run-it","text":"Run the script as root . You will get an error if you do not run the script as root. chmod +x after-effects sudo ./after-effects -C <your config.yml>","title":"Step 3: Run it"},{"location":"#supported-distros","text":"I have not tested the script on following distros. Because they use ubuntu as their base, It should work fine. But no promises. Tip Please check Supported-Distros for complete list of supported distributions.","title":"Supported Distros"},{"location":"#features","text":"Adding Repositories (Limited set of curated repositories only) Installing packages from system repositories Installing statically linked binaries Remove Preinstalled packages Install PIP packages. (Its highly recommended to use virtualenv for your projects, ONLY install pip packages which are absolutely essential.) Add PPAs (Ubuntu & Ubuntu derivatives only) Debian [DEB] packages Snap packages","title":"Features"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"changelog/","text":"Changelog \u00b6 6.0 \u00b6 Remove Lists mode Drop 32 bit support for x86 architecture Add support focal, and Mint 20 Fix Google Cloud SDK on focal Way to handle Python2 being unsupported on focal and other upcoming distros. Changes to some flags. Some flags are now dropped or reassigned. Migrate to GitHub Actions Dark Mode 5.5.2 \u00b6 Add support for Mint 19.3 Tricia 5.5.1 \u00b6 Support for ElementaryOS 5.1 Thanks, IslamAlam Fix JSON errors while fetching commit data in README 5.5.0 \u00b6 Eoan Support Remove Kubernetes repo support. Option to fallback to non LTS releases if using --fix --pre-release flag now supports Debian Bullseye Fix Gist URL not working( #17 ) Introduce --autopilot flag Introduce DEBUG modes(activated on DEBUG=1) 5.4.3 \u00b6 Fix repository keys and fix classic snap installs 5.4.1 \u00b6 Add disco support, start testing on Eoan 5.4.0 \u00b6 Add support for installing snap packages {edge, stable and classic} 5.3.7 \u00b6 Add support for Duo Security for Unix repos 5.3.6 \u00b6 Add ROS repository Redirect URLs to version which passed all tests. Update docs 5.3.4 \u00b6 Update WineHQ keys. Add new wine HQ keys to repo cleanup Add new Spotify key to repo cleanup Add new warning msg function 5.3.3 \u00b6 Add support for Linux Mint 19.1 Tessa 5.3.2 \u00b6 Promote Cosmic to stable, add initial support for disco (19.04) 5.3.1 \u00b6 Add preliminary support for Debian 10 Buster. Fixed typos in documentation. Removed old files, Display git tag message in releases. 5.3.0 \u00b6 Move configuration files from /api to /config Update Spotify Keys [Fixes Spotify repos] Fix a bug which prevented Insync repo being added 5.2.0 \u00b6 New Feature: Static binaries installation All script tmp files are now created /tmp/ae/ 5.1.2 \u00b6 Fix get script URLS. Fix Kubernetes repo url & repos for Linux Mint 5.1.0 \u00b6 Specify YAML config via URL. You can use config YAMLs saved as gists. 5.0 \u00b6 Remove Pre and Post Hooks. Configuration can be now done using YAML file. Its easier & gives more flexibility Lot of improvements & bug fixes. Now tagged versions are released to GitHub releases. Consolidate test scripts. Drop Artful support. Add support for Elementary OS 5 - Juno & Mint 19 Tara. checks also use YAML files. ARM support for some repositories. (not all repos support ARM) Move .redirects data to netlify toml Groundwork to move to parser written in Go. YAML provides more configuration options. Individual repos & tasks can now be controlled via YAML file. 4.0 \u00b6 Pre and Post Hooks for scripts. Custom list of scripts can be run Before and after all the tasks. Add version checks, always run latest version Brand new documentation site Use mkdocs to generate documentation Automatically push & deploy to gh-pages Use Netlify to manage gh-pages site Check if script is in current directory, to avoid errors on hooks Improve log file format: Reduce clutter Bug fixes and typo fixes Simplify TS logging Remote configuration for stats and stats server Ability to blacklist a release Prepare & add skeleton for stats reporting 3.6 \u00b6 Add Option to install system wide python packages using pip Promote Bionic to stable and update code-names Update pre-release to cosmic, rename test script for pre release Remove unused dockerfiles 3.4 \u00b6 Delete cached and downloaded DEBs. (Can be changed with -k flag ) Remove Gnome Specific stuff from default list Remove PPAs incompatible with bionic Bionic is supported with --pre-release flag only with default list. 3.3 \u00b6 Add Signal Desktop repository Better way to handle EOL error messages Fix: Visual Studio Code GPG key not deleted while removing repos. Lint Readme Markdown Nuke Sub-modules 3.2 \u00b6 Allow Bionic test to fail on Travis. Only print logs in Travis if there is an error or a flag is passed. Switch to sub-modules for data directory List files have their own repo now. Zesty reaches EOL soon. Remove it. Use daily images for bionic 3.1 \u00b6 Added Support for Upcoming Ubuntu release bionic. Added an option to use repository for last stable release on bionic. Use Ubuntu Base 18.04 LTS (Bionic Beaver) daily build to build docker image. Allow Bionic tests to fail on Travis CI. Dockerfiles & tests for bionic. Inform in script if running on Upcoming release. Drop google-cloud-sdk from fix_repo_not_available. Use --pre-release if using beta/alpha Ubuntu release. Add Visual studio to repos instead of deb files Rename logging directory to after-effects 3.0 \u00b6 Add Confirmation dialog using whiptail for Actions like Adding PPA, Repositories, Installing Apps, and Deb files Provide an option via command line to bypass the confirmation dialog for ci and automated environments or when its too annoying If the simulate option is selected then Only calculate the upgrade but do not perform upgrade. Added improved Simulate options. Helpful when just want to change somethings and test scripts without really downloading and installing packages Simulate option is by default false and can be toggled by passing -s or --simulate while running the script via command line Do not Enable Canonical Partner repositories in Ubuntu derivatives as they are enabled in installer or are different than Ubuntu. This leaves Partner repositories as they were before Add Feature: Purge Unwanted Packages Improved logging . Redirecting errors and adding time-stamps works better. Travis CI and Docker Testing 2.0 \u00b6 Complete rewrite Improvements in logging and console output Reduced verbosity in terminal output Flexible with packages and deb files Reduced complex dependencies Easy to configure Add Simulate install option for installing deb files and apps. Easier to test scripts now . 1.0 \u00b6 Initial upload.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#60","text":"Remove Lists mode Drop 32 bit support for x86 architecture Add support focal, and Mint 20 Fix Google Cloud SDK on focal Way to handle Python2 being unsupported on focal and other upcoming distros. Changes to some flags. Some flags are now dropped or reassigned. Migrate to GitHub Actions Dark Mode","title":"6.0"},{"location":"changelog/#552","text":"Add support for Mint 19.3 Tricia","title":"5.5.2"},{"location":"changelog/#551","text":"Support for ElementaryOS 5.1 Thanks, IslamAlam Fix JSON errors while fetching commit data in README","title":"5.5.1"},{"location":"changelog/#550","text":"Eoan Support Remove Kubernetes repo support. Option to fallback to non LTS releases if using --fix --pre-release flag now supports Debian Bullseye Fix Gist URL not working( #17 ) Introduce --autopilot flag Introduce DEBUG modes(activated on DEBUG=1)","title":"5.5.0"},{"location":"changelog/#543","text":"Fix repository keys and fix classic snap installs","title":"5.4.3"},{"location":"changelog/#541","text":"Add disco support, start testing on Eoan","title":"5.4.1"},{"location":"changelog/#540","text":"Add support for installing snap packages {edge, stable and classic}","title":"5.4.0"},{"location":"changelog/#537","text":"Add support for Duo Security for Unix repos","title":"5.3.7"},{"location":"changelog/#536","text":"Add ROS repository Redirect URLs to version which passed all tests. Update docs","title":"5.3.6"},{"location":"changelog/#534","text":"Update WineHQ keys. Add new wine HQ keys to repo cleanup Add new Spotify key to repo cleanup Add new warning msg function","title":"5.3.4"},{"location":"changelog/#533","text":"Add support for Linux Mint 19.1 Tessa","title":"5.3.3"},{"location":"changelog/#532","text":"Promote Cosmic to stable, add initial support for disco (19.04)","title":"5.3.2"},{"location":"changelog/#531","text":"Add preliminary support for Debian 10 Buster. Fixed typos in documentation. Removed old files, Display git tag message in releases.","title":"5.3.1"},{"location":"changelog/#530","text":"Move configuration files from /api to /config Update Spotify Keys [Fixes Spotify repos] Fix a bug which prevented Insync repo being added","title":"5.3.0"},{"location":"changelog/#520","text":"New Feature: Static binaries installation All script tmp files are now created /tmp/ae/","title":"5.2.0"},{"location":"changelog/#512","text":"Fix get script URLS. Fix Kubernetes repo url & repos for Linux Mint","title":"5.1.2"},{"location":"changelog/#510","text":"Specify YAML config via URL. You can use config YAMLs saved as gists.","title":"5.1.0"},{"location":"changelog/#50","text":"Remove Pre and Post Hooks. Configuration can be now done using YAML file. Its easier & gives more flexibility Lot of improvements & bug fixes. Now tagged versions are released to GitHub releases. Consolidate test scripts. Drop Artful support. Add support for Elementary OS 5 - Juno & Mint 19 Tara. checks also use YAML files. ARM support for some repositories. (not all repos support ARM) Move .redirects data to netlify toml Groundwork to move to parser written in Go. YAML provides more configuration options. Individual repos & tasks can now be controlled via YAML file.","title":"5.0"},{"location":"changelog/#40","text":"Pre and Post Hooks for scripts. Custom list of scripts can be run Before and after all the tasks. Add version checks, always run latest version Brand new documentation site Use mkdocs to generate documentation Automatically push & deploy to gh-pages Use Netlify to manage gh-pages site Check if script is in current directory, to avoid errors on hooks Improve log file format: Reduce clutter Bug fixes and typo fixes Simplify TS logging Remote configuration for stats and stats server Ability to blacklist a release Prepare & add skeleton for stats reporting","title":"4.0"},{"location":"changelog/#36","text":"Add Option to install system wide python packages using pip Promote Bionic to stable and update code-names Update pre-release to cosmic, rename test script for pre release Remove unused dockerfiles","title":"3.6"},{"location":"changelog/#34","text":"Delete cached and downloaded DEBs. (Can be changed with -k flag ) Remove Gnome Specific stuff from default list Remove PPAs incompatible with bionic Bionic is supported with --pre-release flag only with default list.","title":"3.4"},{"location":"changelog/#33","text":"Add Signal Desktop repository Better way to handle EOL error messages Fix: Visual Studio Code GPG key not deleted while removing repos. Lint Readme Markdown Nuke Sub-modules","title":"3.3"},{"location":"changelog/#32","text":"Allow Bionic test to fail on Travis. Only print logs in Travis if there is an error or a flag is passed. Switch to sub-modules for data directory List files have their own repo now. Zesty reaches EOL soon. Remove it. Use daily images for bionic","title":"3.2"},{"location":"changelog/#31","text":"Added Support for Upcoming Ubuntu release bionic. Added an option to use repository for last stable release on bionic. Use Ubuntu Base 18.04 LTS (Bionic Beaver) daily build to build docker image. Allow Bionic tests to fail on Travis CI. Dockerfiles & tests for bionic. Inform in script if running on Upcoming release. Drop google-cloud-sdk from fix_repo_not_available. Use --pre-release if using beta/alpha Ubuntu release. Add Visual studio to repos instead of deb files Rename logging directory to after-effects","title":"3.1"},{"location":"changelog/#30","text":"Add Confirmation dialog using whiptail for Actions like Adding PPA, Repositories, Installing Apps, and Deb files Provide an option via command line to bypass the confirmation dialog for ci and automated environments or when its too annoying If the simulate option is selected then Only calculate the upgrade but do not perform upgrade. Added improved Simulate options. Helpful when just want to change somethings and test scripts without really downloading and installing packages Simulate option is by default false and can be toggled by passing -s or --simulate while running the script via command line Do not Enable Canonical Partner repositories in Ubuntu derivatives as they are enabled in installer or are different than Ubuntu. This leaves Partner repositories as they were before Add Feature: Purge Unwanted Packages Improved logging . Redirecting errors and adding time-stamps works better. Travis CI and Docker Testing","title":"3.0"},{"location":"changelog/#20","text":"Complete rewrite Improvements in logging and console output Reduced verbosity in terminal output Flexible with packages and deb files Reduced complex dependencies Easy to configure Add Simulate install option for installing deb files and apps. Easier to test scripts now .","title":"2.0"},{"location":"changelog/#10","text":"Initial upload.","title":"1.0"},{"location":"clioptions/","text":"Command line options \u00b6 YAML Configuration file \u00b6 Usage ./after-effects --config-file <filename> OR ./after-effects -C <filename> Simulating package installation \u00b6 Usage ./after-effects -s OR ./after-effects --simulate This flag/option applies to following tasks Installing apt packages. Installing Debian package archives (DEBs). Installing Python packages. Upgrading system packages. Purging unwanted packages. Following details should explain the behavior of this flag. Please do have a look at exceptions, as all tasks cannot be simulated. This option will simulate installing packages mentioned in the config, using the apt-get in-built dry-run option apt-get install -s to simulate the installation of packages. This option can be used to check if the config is compatible/available in the repository. Installation of DEB files also behaves similarly. It uses dpkg -i --dry-run to simulate installation. Its a very good idea to simulate installation when you have reconfigured the apps and packages in the config to check what might be error prone. DEB package files, binaries will be downloaded unlike apt-get package installs. Exceptions - Not everything can be simulated Simulate flag will not simulate adding Repositories or PPAs. If you want to revert the changes please use Reset Repositories option. PPAs and repositories will be added regardless of the flag. Python package installation cannot be simulated. (pip lacks support for it) The script will skip installing apt dependencies and python packages, if simulate option is used. APT package upgrades and apt repository metadata updates cannot be simulated. Only a list of packages will be shown in the logs. Simulate flag will NOT simulate installing dependencies for adding or deleting repositories and PPAs. Skip Version Checks \u00b6 Usage ./after-effects --skip-version-check OR ./after-effects -N Script will warn you and exit if you are not running latest version of the script. You can skip that by using the above option. This will also disable reporting usage stats. Fix for latest Ubuntu releases \u00b6 Usage ./after-effects -f OR ./after-effects --fix This flag/option applies to following repositories Google Cloud SDK GCSFUSE InSync Docker Community Edition Wine HQ Usually it takes a while for additional Repositories (Docker, Google Cloud SDK etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages are available. So, using packages built for previous release works fine most of the time. This is also good fix if you are running a alpha or beta release of Ubuntu. These options only work on Ubuntu or distros using ubuntu code-names and Linux Mint. By default this option is disabled. Repositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary. Derivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial as it is based on Ubuntu 16.04 Xenial Xerus This option applies only for the latest release mentioned in the variable code_name_latest_release . and will be ignored if the release is not latest. Fix fallback to LTS \u00b6 Usage ./after-effects --fix-mode-lts Use LTS as fallback. This flag should be used in conjunction with --fix Otherwise it will be ignored. Instead of using previous Ubuntu release this will use the Last LTS release. i.e if you are on disco and use this bionic repositories will be used. Please use this with caution as it may not work. Note for Pre-Release/ development version of Ubuntu/Debian If you are using a pre-release version of Ubuntu, you can use --pre-release flag to apply the above mentioned fix to pre-release version of Ubuntu. This flag can be used independent of --fix . If both are used together then both flags will be applied if the release is upcoming-release. If the release is stable, only --fix flag will be valid and --pre-release is ignored. Eg: If the repositories are not available for latest stable release as well, go back a release. Ex. If the pre-release is 18.04 and the repositories is not available for 17.10 as well, we use 17.04 repositories. Usually happens in first few days of development cycle of 18.04. Purge not required packages \u00b6 Usage ./after-effects -d OR ./after-effects --purge Usually Ubuntu comes with some pre-installed games, packages which you might not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so. Warning This flag MUST be passed, if you intend to purge packages from system. Otherwise you will receive an error. If you are using YML config file you MUST set purge_enabled: true under config.flags. See Example YAML file for more info. Delete log file \u00b6 Usage ./after-effects -l OR ./after-effects --delete-log Just a quick way to delete logs generated by this script. Flag priority If you pass -l rest of the commands will be ignored, as the script exits after deleting the log! Keep downloaded DEB files \u00b6 Usage ./after-effects -k OR ./after-effects --keep-debs Keeps packages cached by APT and downloaded DEB packages. Default behavior is to clean apt cache and delete downloaded DEB packages. Python packages Python package installation does not honor this flag. Hide configuration data \u00b6 Usage ./after-effects --hide-config OR ```console ./after-effects -H ``` Hides displaying configuration data in the output. Remote YAML configuration file \u00b6 Usage ./after-effects --remote-yaml <URL to YAML file> OR ./after-effects -R <URL to YAML file> You can specify YAML file to use. Script will fetch it and parse it.The file should be available without any interactive logins. Warning If using GitHub gists, please provide raw gist URL. You should only use trusted remote configurations. As its a bash script a malicious remote configuration can cause remote code to execute on your system. Version \u00b6 Usage ./after-effect -v OR ./after-effects --version This will display version info. You do not have to be root to run this. For all the other tasks you need to be root or use sudo. Autopilot Mode \u00b6 Autopilot mode is designed to run the script in a non interactive manner. Please see Autopilot in tasks for more info. Help \u00b6 Displays this help option. \u279c ./after-effects -h A Post Installation Script for Ubuntu/Debian/Linux Mint Usage: [sudo] ./after-effects [options] Non-Action options (can be run as non-root user) ------------------------------------------------- [-v --version] Display version info [-h --help] Display this help message Configuration Options ------------------------------------------------- [-c | --config-file] Local yaml config file [-R | --remote-yaml] Use config yaml hosted somewhere else The following options are \"action\" options and will make changes to your system depending on tasks chosen. ------------------------------------------------- [-d | --purge] Enable Purging packages [-f | --fix] Fix codenames for new releases [-p | --pre-release] Same as --fix but for beta/alpha releases [--fix-mode-lts] Similar to --fix but fallback to last LTS Should be used with --fix [-k | --keep-debs] Do not invoke apt-clean & do not delete downloaded deb packages [-l | --delete-log] Delete logfile (./log/after-effects.log) [-s | --simulate] Try not make changes to system and use --dry-run Please read the documentation, to know its limits as everything cannot be simulated. Other Options ------------------------------------------------- [-E | --skip-env-checks] Skip some env checks [-V | --skip-version-check] Skip checking for latest version [-H --hide-config] Hide configuration table [-A --autopilot] Enables AUTOPILOT mode(No Prompts) Links & License ------------------------------------------------- GitHub : https://git.io/Jv08V Documentation : https://ae.prasadt.com * This script is licensed under GPLv3. * Show your support by starring the repo on GitHub -------------------------------------------------","title":"Options"},{"location":"clioptions/#command-line-options","text":"","title":"Command line options"},{"location":"clioptions/#yaml-configuration-file","text":"Usage ./after-effects --config-file <filename> OR ./after-effects -C <filename>","title":"YAML Configuration file"},{"location":"clioptions/#simulating-package-installation","text":"Usage ./after-effects -s OR ./after-effects --simulate This flag/option applies to following tasks Installing apt packages. Installing Debian package archives (DEBs). Installing Python packages. Upgrading system packages. Purging unwanted packages. Following details should explain the behavior of this flag. Please do have a look at exceptions, as all tasks cannot be simulated. This option will simulate installing packages mentioned in the config, using the apt-get in-built dry-run option apt-get install -s to simulate the installation of packages. This option can be used to check if the config is compatible/available in the repository. Installation of DEB files also behaves similarly. It uses dpkg -i --dry-run to simulate installation. Its a very good idea to simulate installation when you have reconfigured the apps and packages in the config to check what might be error prone. DEB package files, binaries will be downloaded unlike apt-get package installs. Exceptions - Not everything can be simulated Simulate flag will not simulate adding Repositories or PPAs. If you want to revert the changes please use Reset Repositories option. PPAs and repositories will be added regardless of the flag. Python package installation cannot be simulated. (pip lacks support for it) The script will skip installing apt dependencies and python packages, if simulate option is used. APT package upgrades and apt repository metadata updates cannot be simulated. Only a list of packages will be shown in the logs. Simulate flag will NOT simulate installing dependencies for adding or deleting repositories and PPAs.","title":"Simulating package installation"},{"location":"clioptions/#skip-version-checks","text":"Usage ./after-effects --skip-version-check OR ./after-effects -N Script will warn you and exit if you are not running latest version of the script. You can skip that by using the above option. This will also disable reporting usage stats.","title":"Skip Version Checks"},{"location":"clioptions/#fix-for-latest-ubuntu-releases","text":"Usage ./after-effects -f OR ./after-effects --fix This flag/option applies to following repositories Google Cloud SDK GCSFUSE InSync Docker Community Edition Wine HQ Usually it takes a while for additional Repositories (Docker, Google Cloud SDK etc) to add support for latest release of Ubuntu. However we can use the previous release for which packages are available. So, using packages built for previous release works fine most of the time. This is also good fix if you are running a alpha or beta release of Ubuntu. These options only work on Ubuntu or distros using ubuntu code-names and Linux Mint. By default this option is disabled. Repositories like Spotify and Google Chrome do not use code names in their repository URLs. So the above workaround is not necessary. Derivatives of Ubuntu will use the code name of Ubuntu on which they are based. For example Linux mint 18.2 Serena will use code name xenial as it is based on Ubuntu 16.04 Xenial Xerus This option applies only for the latest release mentioned in the variable code_name_latest_release . and will be ignored if the release is not latest.","title":"Fix for latest Ubuntu releases"},{"location":"clioptions/#fix-fallback-to-lts","text":"Usage ./after-effects --fix-mode-lts Use LTS as fallback. This flag should be used in conjunction with --fix Otherwise it will be ignored. Instead of using previous Ubuntu release this will use the Last LTS release. i.e if you are on disco and use this bionic repositories will be used. Please use this with caution as it may not work. Note for Pre-Release/ development version of Ubuntu/Debian If you are using a pre-release version of Ubuntu, you can use --pre-release flag to apply the above mentioned fix to pre-release version of Ubuntu. This flag can be used independent of --fix . If both are used together then both flags will be applied if the release is upcoming-release. If the release is stable, only --fix flag will be valid and --pre-release is ignored. Eg: If the repositories are not available for latest stable release as well, go back a release. Ex. If the pre-release is 18.04 and the repositories is not available for 17.10 as well, we use 17.04 repositories. Usually happens in first few days of development cycle of 18.04.","title":"Fix fallback to LTS"},{"location":"clioptions/#purge-not-required-packages","text":"Usage ./after-effects -d OR ./after-effects --purge Usually Ubuntu comes with some pre-installed games, packages which you might not need. This option is a switch to used in purging these packages mentioned in the subsequent sections. Since it is possible that user might purge necessary packages like sudo or other core system components, these just acts like a barrier from accidentally doing so. Warning This flag MUST be passed, if you intend to purge packages from system. Otherwise you will receive an error. If you are using YML config file you MUST set purge_enabled: true under config.flags. See Example YAML file for more info.","title":"Purge not required packages"},{"location":"clioptions/#delete-log-file","text":"Usage ./after-effects -l OR ./after-effects --delete-log Just a quick way to delete logs generated by this script. Flag priority If you pass -l rest of the commands will be ignored, as the script exits after deleting the log!","title":"Delete log file"},{"location":"clioptions/#keep-downloaded-deb-files","text":"Usage ./after-effects -k OR ./after-effects --keep-debs Keeps packages cached by APT and downloaded DEB packages. Default behavior is to clean apt cache and delete downloaded DEB packages. Python packages Python package installation does not honor this flag.","title":"Keep downloaded DEB files"},{"location":"clioptions/#hide-configuration-data","text":"Usage ./after-effects --hide-config OR ```console ./after-effects -H ``` Hides displaying configuration data in the output.","title":"Hide configuration data"},{"location":"clioptions/#remote-yaml-configuration-file","text":"Usage ./after-effects --remote-yaml <URL to YAML file> OR ./after-effects -R <URL to YAML file> You can specify YAML file to use. Script will fetch it and parse it.The file should be available without any interactive logins. Warning If using GitHub gists, please provide raw gist URL. You should only use trusted remote configurations. As its a bash script a malicious remote configuration can cause remote code to execute on your system.","title":"Remote YAML configuration file"},{"location":"clioptions/#version","text":"Usage ./after-effect -v OR ./after-effects --version This will display version info. You do not have to be root to run this. For all the other tasks you need to be root or use sudo.","title":"Version"},{"location":"clioptions/#autopilot-mode","text":"Autopilot mode is designed to run the script in a non interactive manner. Please see Autopilot in tasks for more info.","title":"Autopilot Mode"},{"location":"clioptions/#help","text":"Displays this help option. \u279c ./after-effects -h A Post Installation Script for Ubuntu/Debian/Linux Mint Usage: [sudo] ./after-effects [options] Non-Action options (can be run as non-root user) ------------------------------------------------- [-v --version] Display version info [-h --help] Display this help message Configuration Options ------------------------------------------------- [-c | --config-file] Local yaml config file [-R | --remote-yaml] Use config yaml hosted somewhere else The following options are \"action\" options and will make changes to your system depending on tasks chosen. ------------------------------------------------- [-d | --purge] Enable Purging packages [-f | --fix] Fix codenames for new releases [-p | --pre-release] Same as --fix but for beta/alpha releases [--fix-mode-lts] Similar to --fix but fallback to last LTS Should be used with --fix [-k | --keep-debs] Do not invoke apt-clean & do not delete downloaded deb packages [-l | --delete-log] Delete logfile (./log/after-effects.log) [-s | --simulate] Try not make changes to system and use --dry-run Please read the documentation, to know its limits as everything cannot be simulated. Other Options ------------------------------------------------- [-E | --skip-env-checks] Skip some env checks [-V | --skip-version-check] Skip checking for latest version [-H --hide-config] Hide configuration table [-A --autopilot] Enables AUTOPILOT mode(No Prompts) Links & License ------------------------------------------------- GitHub : https://git.io/Jv08V Documentation : https://ae.prasadt.com * This script is licensed under GPLv3. * Show your support by starring the repo on GitHub -------------------------------------------------","title":"Help"},{"location":"configuration/","text":"Overview of Configuration files \u00b6 This Script is designed to be flexible. use --config-file FILENAME Check Sample YAML configuration file here. Using config file If you are testing, it might be a good idea to use a local file which holds this configuration data. In that case use -C <filename> option. After you customize, might want to use simulate flag. sudo ./after-effects -s -C config.yml -Y If both -C and --remote-yaml are used, local config file takes priority, and remote file is completely ignored. Autopilot mode \u00b6 Setting \"AUTOPILOT=true\" or --autopilot will run all the tasks specified in the YAML file. The order in which tasks are run is as follows. Update Upgrade Add Repositories Add PPAs [if supported] Install packages Install DEB packages Install Python2 Modules Install Python 3 Modules Purge unwanted Packages Install Snap packages Reserved Environment Variables \u00b6 Prefix AE_ is reserved along with GITHUB_ as they are used for configuration and testing.","title":"Configuration"},{"location":"configuration/#overview-of-configuration-files","text":"This Script is designed to be flexible. use --config-file FILENAME Check Sample YAML configuration file here. Using config file If you are testing, it might be a good idea to use a local file which holds this configuration data. In that case use -C <filename> option. After you customize, might want to use simulate flag. sudo ./after-effects -s -C config.yml -Y If both -C and --remote-yaml are used, local config file takes priority, and remote file is completely ignored.","title":"Overview of Configuration files"},{"location":"configuration/#autopilot-mode","text":"Setting \"AUTOPILOT=true\" or --autopilot will run all the tasks specified in the YAML file. The order in which tasks are run is as follows. Update Upgrade Add Repositories Add PPAs [if supported] Install packages Install DEB packages Install Python2 Modules Install Python 3 Modules Purge unwanted Packages Install Snap packages","title":"Autopilot mode"},{"location":"configuration/#reserved-environment-variables","text":"Prefix AE_ is reserved along with GITHUB_ as they are used for configuration and testing.","title":"Reserved Environment Variables"},{"location":"license/","text":"License \u00b6 This project is licensed under GPL v3. External libraries and tools \u00b6 This project uses mkdocs for documentation and mkdocs-material theme.","title":"License"},{"location":"license/#license","text":"This project is licensed under GPL v3.","title":"License"},{"location":"license/#external-libraries-and-tools","text":"This project uses mkdocs for documentation and mkdocs-material theme.","title":"External libraries and tools"},{"location":"logs/","text":"Logs \u00b6 Logs are written to a file <current-dir>/logs/after-effects.log . Time-stamps in the logs may not be accurate because some commands buffer outputs. Sensitive Log files may contain sensitive information or personally identifying information. They are not uploaded anywhere.","title":"Logs"},{"location":"logs/#logs","text":"Logs are written to a file <current-dir>/logs/after-effects.log . Time-stamps in the logs may not be accurate because some commands buffer outputs. Sensitive Log files may contain sensitive information or personally identifying information. They are not uploaded anywhere.","title":"Logs"},{"location":"tasks/","text":"What can it do? \u00b6 Add Repositories \u00b6 This task can add the following repositories. Name Key Docker docker Duo Security Unix duo Google Chrome & Google Earth google Google Cloud SDK googlecloud GCSFUSE gcsfuse Insync insync Mendeley desktop mendeley ROS ros Signal for desktop signal Skype skype Spotify Desktop spotify Visual Studio code vscode Wine HQ winehq Using --fix falg Please note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a development version of Ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of Ubuntu). For more info see command line options. Controlling which repository is added using config file You can set your YML file to decide which repository is added. Some repositories may no be supported on your architecture or distribution. Take a look at config.yml for example. If you omit a value, it defaults to false ALWAYS . Do note that if you are using lists default values are different, they are mentioned in below. ROS Releases & Ubuntu/Debian versions ROS repository only support certain Ubuntu/Debian distributions. Please use appropriate packages to install depending on your distro/version. You can find more info at ROS-Wiki Though Ubuntu derivatives might work, they are not supported. Example yaml configuration snippet is given below. config: # Enabled Tasks tasks: update: true # Add Repos # individual repos flags are mentioned under config.add_repo key repo: true # Repository Flags add_repo: winehq: true docker: true mendeley: false googlecloud: true spotify: true vscode: true skype: true signal: false insync: true google: true Canonical partner repositories \u00b6 Canonical partner repositories are not configured or enabled for derivatives of Ubuntu because thee might be some conflicts. Note on 32 bit & ARM Architecture Please note that Google Chrome doesn't support 32 bit architecture, please use Chromium. Signal, Skype, Mendeley and Visual studio code do not support 32 bit architecture. Some repositories are not available for ARM architecture. Add personal package archives (PPA) \u00b6 PPAs can be added using the configuration file in data directory ./data/ppa.list or in the YML file. Only one ppa entry per line (No comments or anything else anywhere in the file) in the format ppa:{author}/{ppa} for example ppa:mozillateam/firefox-next The file will be read and the PPAs will be added from the list. Logs will show entry in the format [date and time] [ PPA-Logs ] <log> Warning PPAs should be checked before they are added to the list. Sometimes PPAs listed in the file may not be available for all releases. Debian does not support PPAs. Install apt packages \u00b6 Packages can be installed by using configuration lists in the data directory. This works similar to ppas There are seven list of packages under key config.install.apt.[mentioned from 1-7] \u00b6 administration - Contains Administrative packages security - Contains Security related tools and packages productivity - Office tools, writing tools, LateX, document tools and other productivity tools, Email clients, browsers, IM clients etc. multimedia - Multimedia tools like media players, audio converters and playes etc. development - IDEs [Spyder, Jetbeans etc], languages [go, python, ruby, rust, java etc], Containers [docker lxc rkt etc], Python libraries, compilers [gcc, clang] SDKs [AWS SDK, Google Cloud SDK, open-jdk, Tensor Flow], headers and libraries[ocl-icd-dev], Anything related to development and -dev or -devl packages. other - Everything which does not fit in the above categories. Themes, Tools, Utilities etc. external - Any packages which are provided by ppas, or repositories not present in base Ubuntu distribution. There's a possibility that the repository might not be added or may be unavailable or offline. So Keeping the list separate from others packages minimizes errors if there are any. This classification is only for ease of use and need not be strictly followed. You can put 'vlc' package in 'security', it will still install fine. This classification helps while writing configs and editing them. Its advised to follow it if your configs tend to get to couple of hundreds of lines. Also YAML file should be a valid YAML & indented by 2 spaces. Special list of packages - Purge list \u00b6 There is a special package list under key, config.purge list of apt packages to be purged from the system. Install Debian package archives (.deb files) \u00b6 This will install deb files specified in the YAML config under config.install.debian_packages . Logs will show entry in the format [<date and time>] [ PKG ] <log> for dpkg actions and APT Logs will show entry in the format [<date and time>] [ APT ] <log> for actions performed by apt commands. ( apt-get install -f for missing packages) Simulate option will use --dry-run option in dpkg to Simulate DEB installation. Configuration file is a csv file without headers. first column corresponds to URL ans the second field the file name under which the file is saved. Each DEB file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example to install Atom Editor the entry should look like below. https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb config : install : debian_packages : - https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb First part is the URL to the deb file separated by ',' name of the file. Note on file names in configuration Please note that deb file will be saved with the name mentioned in the file. (DEB file is named exactly as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars) Install Static binaries to /usr/local/bin \u00b6 This will install binaries bin.list or YAML config under config.install.binaries . Simulate option will download the package but not install it. Configuration file is a csv file without headers. first column corresponds to URL ans the second field the file name under which the file is saved. Each DEB file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example, to install kompose , the entry should look like below. https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose config : install : binaries : - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose First part is the URL to the binary file separated by ',' name of the binary. Note on file names in configuration Please note that file will be saved with the name mentioned in the file and will be in your path. Install python packages (via pip) \u00b6 This will install system wide python packages using pip. You can specify in YAML config under config.install.python2 or config.install.python3 This task requires python-pip package is installed, If not , will be installed anyway. These follow similar configuration as packages files. One item per line. however you can specify version requirements as you would for requirements file. Simulate flag will skip installing packages, unless --internal-ci-mode is used. Example configuration is given below. config : install : python2 : - docker-compose python3 : - awscli Warning Don't mix Python 3 packages with Python 2 packages. Also, some recent distributions do not support Python2. Purge Unwanted Packages \u00b6 This will purge Unwanted packages from the system. The packages mentioned in config.purge in yaml. The format of the purge.list is similar to that of packages, one packages per line of the file and no comments or anything else. Warning It is necessary to pass command line argument -d or set config.flags.purge_enabled: true in config. Reset repositories / Purge PPAs \u00b6 This will reset the repositories, and purge ppas added by this script. This will NOT reset or remove repositories added by the DEB files. Simulate option has no effect on this action and ppa-purge WILL downgrade packages if necessary. Scope of this function This will NOT remove PPAs or repositories you have added manually or those added while installing DEB files. Additionally, this will not un-install packages installed from those repos and PPAs. Installing Snap packages \u00b6 Script can install snap packages from snapstore. For example check the default config file. You should specify the classic snaps under install.snaps.calssic , edge snaps under install.snaps.edge and normal snaps under install.snaps.normal in the yaml file. config : install : snaps : normal : - htop classic : - vscode Warning Its responsibility of the user to separate classic snaps, edge and normal snaps. All In one \u00b6 This will perform Following actions. (In the following order) Update repository metadata Upgrade packages Add repositories Add PPAs Install Apps Install DEB files Install Python 2 modules Install Python 3 Modules Install Static binaries This option will honor --autopilot and --simulate options as individual tasks would do. AUTOPILOT Mode \u00b6 Using --autopilot will skip all UI prompts and confirmations. This mode requires you to specify tasks to be run if using YAML config. Example snippet is given below. config : # Enabled Tasks tasks : update : true upgrade : true # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge key purge : true debs : true pip2 : true pip3 : true binaries : true Delete logs \u00b6 A log file is generated containing all the output generated by the apt and other commands and contain generic information and errors . This task will delete the log file after-effects.log . Log file is located in the directory logs in folder which you ran thin script. Sometimes errors might not be written to log file but displayed on screen and vice-versa. Please verify that everything went okay before deleting the logs.","title":"Tasks"},{"location":"tasks/#what-can-it-do","text":"","title":"What can it do?"},{"location":"tasks/#add-repositories","text":"This task can add the following repositories. Name Key Docker docker Duo Security Unix duo Google Chrome & Google Earth google Google Cloud SDK googlecloud GCSFUSE gcsfuse Insync insync Mendeley desktop mendeley ROS ros Signal for desktop signal Skype skype Spotify Desktop spotify Visual Studio code vscode Wine HQ winehq Using --fix falg Please note that the above repositories are sometimes not updated for latest Ubuntu release and most certainly will not be available for upcoming release of Ubuntu(Alpha/Beta). It might take some time till the repositories are available for the latest release. Use -f or --fix command line option or --pre-release in case you are using a development version of Ubuntu to revert using latest available version of repositories (usually previous Ubuntu release or in case of Beta/Alpha latest stable release of Ubuntu). For more info see command line options. Controlling which repository is added using config file You can set your YML file to decide which repository is added. Some repositories may no be supported on your architecture or distribution. Take a look at config.yml for example. If you omit a value, it defaults to false ALWAYS . Do note that if you are using lists default values are different, they are mentioned in below. ROS Releases & Ubuntu/Debian versions ROS repository only support certain Ubuntu/Debian distributions. Please use appropriate packages to install depending on your distro/version. You can find more info at ROS-Wiki Though Ubuntu derivatives might work, they are not supported. Example yaml configuration snippet is given below. config: # Enabled Tasks tasks: update: true # Add Repos # individual repos flags are mentioned under config.add_repo key repo: true # Repository Flags add_repo: winehq: true docker: true mendeley: false googlecloud: true spotify: true vscode: true skype: true signal: false insync: true google: true","title":"Add Repositories"},{"location":"tasks/#canonical-partner-repositories","text":"Canonical partner repositories are not configured or enabled for derivatives of Ubuntu because thee might be some conflicts. Note on 32 bit & ARM Architecture Please note that Google Chrome doesn't support 32 bit architecture, please use Chromium. Signal, Skype, Mendeley and Visual studio code do not support 32 bit architecture. Some repositories are not available for ARM architecture.","title":"Canonical partner repositories"},{"location":"tasks/#add-personal-package-archives-ppa","text":"PPAs can be added using the configuration file in data directory ./data/ppa.list or in the YML file. Only one ppa entry per line (No comments or anything else anywhere in the file) in the format ppa:{author}/{ppa} for example ppa:mozillateam/firefox-next The file will be read and the PPAs will be added from the list. Logs will show entry in the format [date and time] [ PPA-Logs ] <log> Warning PPAs should be checked before they are added to the list. Sometimes PPAs listed in the file may not be available for all releases. Debian does not support PPAs.","title":"Add personal package archives (PPA)"},{"location":"tasks/#install-apt-packages","text":"Packages can be installed by using configuration lists in the data directory. This works similar to ppas","title":"Install apt packages"},{"location":"tasks/#there-are-seven-list-of-packages-under-key-configinstallaptmentioned-from-1-7","text":"administration - Contains Administrative packages security - Contains Security related tools and packages productivity - Office tools, writing tools, LateX, document tools and other productivity tools, Email clients, browsers, IM clients etc. multimedia - Multimedia tools like media players, audio converters and playes etc. development - IDEs [Spyder, Jetbeans etc], languages [go, python, ruby, rust, java etc], Containers [docker lxc rkt etc], Python libraries, compilers [gcc, clang] SDKs [AWS SDK, Google Cloud SDK, open-jdk, Tensor Flow], headers and libraries[ocl-icd-dev], Anything related to development and -dev or -devl packages. other - Everything which does not fit in the above categories. Themes, Tools, Utilities etc. external - Any packages which are provided by ppas, or repositories not present in base Ubuntu distribution. There's a possibility that the repository might not be added or may be unavailable or offline. So Keeping the list separate from others packages minimizes errors if there are any. This classification is only for ease of use and need not be strictly followed. You can put 'vlc' package in 'security', it will still install fine. This classification helps while writing configs and editing them. Its advised to follow it if your configs tend to get to couple of hundreds of lines. Also YAML file should be a valid YAML & indented by 2 spaces.","title":"There are seven list of packages under key config.install.apt.[mentioned from 1-7]"},{"location":"tasks/#special-list-of-packages-purge-list","text":"There is a special package list under key, config.purge list of apt packages to be purged from the system.","title":"Special list of packages - Purge list"},{"location":"tasks/#install-debian-package-archives-deb-files","text":"This will install deb files specified in the YAML config under config.install.debian_packages . Logs will show entry in the format [<date and time>] [ PKG ] <log> for dpkg actions and APT Logs will show entry in the format [<date and time>] [ APT ] <log> for actions performed by apt commands. ( apt-get install -f for missing packages) Simulate option will use --dry-run option in dpkg to Simulate DEB installation. Configuration file is a csv file without headers. first column corresponds to URL ans the second field the file name under which the file is saved. Each DEB file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example to install Atom Editor the entry should look like below. https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb config : install : debian_packages : - https://atom-installer.github.com/v1.21.1/atom-amd64.deb,ATOM-Editor.deb First part is the URL to the deb file separated by ',' name of the file. Note on file names in configuration Please note that deb file will be saved with the name mentioned in the file. (DEB file is named exactly as mentioned in the second field. So if you want them to be named with extension .deb include that in the second field and avoid illegal chars)","title":"Install Debian package archives (.deb files)"},{"location":"tasks/#install-static-binaries-to-usrlocalbin","text":"This will install binaries bin.list or YAML config under config.install.binaries . Simulate option will download the package but not install it. Configuration file is a csv file without headers. first column corresponds to URL ans the second field the file name under which the file is saved. Each DEB file to be installed should have following entry. URL to the deb file which can be accessed using wget , Name of the deb file without any spaces or special chars except hyphen. For example, to install kompose , the entry should look like below. https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose config : install : binaries : - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose First part is the URL to the binary file separated by ',' name of the binary. Note on file names in configuration Please note that file will be saved with the name mentioned in the file and will be in your path.","title":"Install Static binaries to /usr/local/bin"},{"location":"tasks/#install-python-packages-via-pip","text":"This will install system wide python packages using pip. You can specify in YAML config under config.install.python2 or config.install.python3 This task requires python-pip package is installed, If not , will be installed anyway. These follow similar configuration as packages files. One item per line. however you can specify version requirements as you would for requirements file. Simulate flag will skip installing packages, unless --internal-ci-mode is used. Example configuration is given below. config : install : python2 : - docker-compose python3 : - awscli Warning Don't mix Python 3 packages with Python 2 packages. Also, some recent distributions do not support Python2.","title":"Install python packages (via pip)"},{"location":"tasks/#purge-unwanted-packages","text":"This will purge Unwanted packages from the system. The packages mentioned in config.purge in yaml. The format of the purge.list is similar to that of packages, one packages per line of the file and no comments or anything else. Warning It is necessary to pass command line argument -d or set config.flags.purge_enabled: true in config.","title":"Purge Unwanted Packages"},{"location":"tasks/#reset-repositories-purge-ppas","text":"This will reset the repositories, and purge ppas added by this script. This will NOT reset or remove repositories added by the DEB files. Simulate option has no effect on this action and ppa-purge WILL downgrade packages if necessary. Scope of this function This will NOT remove PPAs or repositories you have added manually or those added while installing DEB files. Additionally, this will not un-install packages installed from those repos and PPAs.","title":"Reset repositories / Purge PPAs"},{"location":"tasks/#installing-snap-packages","text":"Script can install snap packages from snapstore. For example check the default config file. You should specify the classic snaps under install.snaps.calssic , edge snaps under install.snaps.edge and normal snaps under install.snaps.normal in the yaml file. config : install : snaps : normal : - htop classic : - vscode Warning Its responsibility of the user to separate classic snaps, edge and normal snaps.","title":"Installing Snap packages"},{"location":"tasks/#all-in-one","text":"This will perform Following actions. (In the following order) Update repository metadata Upgrade packages Add repositories Add PPAs Install Apps Install DEB files Install Python 2 modules Install Python 3 Modules Install Static binaries This option will honor --autopilot and --simulate options as individual tasks would do.","title":"All In one"},{"location":"tasks/#autopilot-mode","text":"Using --autopilot will skip all UI prompts and confirmations. This mode requires you to specify tasks to be run if using YAML config. Example snippet is given below. config : # Enabled Tasks tasks : update : true upgrade : true # Add Repos # individual repos flags are mentioned under config.add_repo key repo : true # Add PPAs ppa : true # APT Packages apt : true # Whether to purge packages mentioned in config.purge key purge : true debs : true pip2 : true pip3 : true binaries : true","title":"AUTOPILOT Mode"},{"location":"tasks/#delete-logs","text":"A log file is generated containing all the output generated by the apt and other commands and contain generic information and errors . This task will delete the log file after-effects.log . Log file is located in the directory logs in folder which you ran thin script. Sometimes errors might not be written to log file but displayed on screen and vice-versa. Please verify that everything went okay before deleting the logs.","title":"Delete logs"},{"location":"testing/","text":"CI and Testing \u00b6 Script is tested using the simulate mode on all supported ubuntu versions using Docker. Test scripts can be found in tests directory.","title":"Testing"},{"location":"testing/#ci-and-testing","text":"Script is tested using the simulate mode on all supported ubuntu versions using Docker. Test scripts can be found in tests directory.","title":"CI and Testing"},{"location":"yaml/","text":"YAML Config \u00b6 The configuration file is pretty much self explanatory so, I am going to just post a sample config file below. All Boolean fields are optional and if not provided or if found to be invalid, fallback to false. Sample configs can be found in config directory. # Install Config version: 5 name: Polaris author: Prasad T # Configuration config: # Enabled Tasks tasks: update: true upgrade: true # Add Repos # individual repos flags are mentioned under config.add_repo key repo: true # Add PPAs ppa: true # APT Packages apt: true # Whether to purge packages mentioned in config.purge key purge: true debs: true pip2: true pip3: true binaries: true # Repository Flags add_repo: winehq: true docker: true mendeley: false googlecloud: true spotify: true vscode: true skype: true signal: false insync: true google: true # Flags flags: # Simulate flag will never be overridden by remote config. purge_enabled: true preserve_debs: true # Packages to purge purge: - gnome-mines - gnome-sudoku - aisleriot - gnome-mahjongg # PPA List ppa: - ppa:dawidd0811/neofetch - ppa:yubico/stable - ppa:teejee2008/ppa # Install components # APT Packages, Python Modules, Debian packages install: # Python 2 Modules python2: - docker-compose # Python 3 Modules python3: - awscli # Debian packages: .deb files # CSV format similar to lists debian_packages: - https://atom-installer.github.com/v1.28.0/atom-amd64.deb,Atom-Editor.deb - https://download.teamviewer.com/download/teamviewer_i386.deb,Teamviewer.deb # Static Binaries which will be placed in /usr/local/bin # minikube, docker-compose, etc. # Follows same pattern as Debian packages # Name to be saved is second field binaries: - https://github.com/docker/compose/releases/download/1.20.0/docker-compose-linux-x86_64,docker-compose - https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64,minikube - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose apt: # Admin related Stuff administration: - dconf-editor - htop - apt-xapian-index - gdebi - gparted - synaptic - bleachbit # Security Related Stuff security: - gufw # Productivity & Office Tools. productivity: - empathy - evolution - realmd - pandoc-data - pandoc - texstudio - texlive-fonts-extra - texlive-formats-extra - texlive-fonts-recommended - texlive-science - texlive-generic-extra - texlive-xetex - texlive-luatex - texlive-pstricks - texlive-science - texlive-extra-utils - texlive-lang-english - texlive-lang-other - texlive-font-utils - texlive-publishers - gummi # Multimedia Tools. Photo Editors Converting tools, plex etc. multimedia: - audacity - vlc - gimp - handbrake - handbrake-cli - rawtherapee - darktable - mpv - pavucontrol - cheese # Tools related to development. development: - curl - spyder - spyder3 - git - shellcheck - ocl-icd-dev - opencl-headers - clinfo - vainfo - vdpauinfo - ocl-icd-libopencl1 - ruby - ruby-dev - python-magic - putty - python3-pip - python-dateutil - python-pip-whl - python-pip # Everything Else # Which is conditional other: - gnome-online-miners # Packages supplied by external repositories & PPAs # Dont Mix packages provided by distribution and PPAs # Sometimes external repos and ppas fail, so better isolate it. external: - google-chrome-stable - spotify-client - code - google-cloud-sdk - docker-ce","title":"Example Config"},{"location":"yaml/#yaml-config","text":"The configuration file is pretty much self explanatory so, I am going to just post a sample config file below. All Boolean fields are optional and if not provided or if found to be invalid, fallback to false. Sample configs can be found in config directory. # Install Config version: 5 name: Polaris author: Prasad T # Configuration config: # Enabled Tasks tasks: update: true upgrade: true # Add Repos # individual repos flags are mentioned under config.add_repo key repo: true # Add PPAs ppa: true # APT Packages apt: true # Whether to purge packages mentioned in config.purge key purge: true debs: true pip2: true pip3: true binaries: true # Repository Flags add_repo: winehq: true docker: true mendeley: false googlecloud: true spotify: true vscode: true skype: true signal: false insync: true google: true # Flags flags: # Simulate flag will never be overridden by remote config. purge_enabled: true preserve_debs: true # Packages to purge purge: - gnome-mines - gnome-sudoku - aisleriot - gnome-mahjongg # PPA List ppa: - ppa:dawidd0811/neofetch - ppa:yubico/stable - ppa:teejee2008/ppa # Install components # APT Packages, Python Modules, Debian packages install: # Python 2 Modules python2: - docker-compose # Python 3 Modules python3: - awscli # Debian packages: .deb files # CSV format similar to lists debian_packages: - https://atom-installer.github.com/v1.28.0/atom-amd64.deb,Atom-Editor.deb - https://download.teamviewer.com/download/teamviewer_i386.deb,Teamviewer.deb # Static Binaries which will be placed in /usr/local/bin # minikube, docker-compose, etc. # Follows same pattern as Debian packages # Name to be saved is second field binaries: - https://github.com/docker/compose/releases/download/1.20.0/docker-compose-linux-x86_64,docker-compose - https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64,minikube - https://github.com/kubernetes/kompose/releases/download/v1.19.0/kompose-linux-amd64,kompose apt: # Admin related Stuff administration: - dconf-editor - htop - apt-xapian-index - gdebi - gparted - synaptic - bleachbit # Security Related Stuff security: - gufw # Productivity & Office Tools. productivity: - empathy - evolution - realmd - pandoc-data - pandoc - texstudio - texlive-fonts-extra - texlive-formats-extra - texlive-fonts-recommended - texlive-science - texlive-generic-extra - texlive-xetex - texlive-luatex - texlive-pstricks - texlive-science - texlive-extra-utils - texlive-lang-english - texlive-lang-other - texlive-font-utils - texlive-publishers - gummi # Multimedia Tools. Photo Editors Converting tools, plex etc. multimedia: - audacity - vlc - gimp - handbrake - handbrake-cli - rawtherapee - darktable - mpv - pavucontrol - cheese # Tools related to development. development: - curl - spyder - spyder3 - git - shellcheck - ocl-icd-dev - opencl-headers - clinfo - vainfo - vdpauinfo - ocl-icd-libopencl1 - ruby - ruby-dev - python-magic - putty - python3-pip - python-dateutil - python-pip-whl - python-pip # Everything Else # Which is conditional other: - gnome-online-miners # Packages supplied by external repositories & PPAs # Dont Mix packages provided by distribution and PPAs # Sometimes external repos and ppas fail, so better isolate it. external: - google-chrome-stable - spotify-client - code - google-cloud-sdk - docker-ce","title":"YAML Config"},{"location":"drafts/proposed-changes/","text":"Proposed Changes \u00b6 APT config for adding generic apt repos \u00b6 Not yet in stable. There is no plan to remove Google Chrome ROS VSCode Docker Spotify Skype Google Cloud from apt-repo configs. they will be supported with single entry config via add_repo.<id> . However following may be removed in the future versions as they are not supported properly by their vendors and often require some tweaks or for other reasons. You can add them via new apt_sources config if you want. InSync Duo Security GCSFUSE(hasn't been updated since bionic) apt_sources : # Comment, This will show in software properties - comment : Google Chrome # GPG key Can be URL or a GPG key # Keys will be retrieved from Ubuntu key-server. key_url : key_id : # URL for repo # Variable interpolation is possible # Following variables are supported # CODE_NAME for release codename eg. bionic # DISTRO_NAME for name of the distribution eg.ubuntu source : # Additional architecture support armhf : true i386 : false arm64 : true # Supports Debian # Should be a bool # Default is true debian : true # Supports Derivatives like mint? # Can be yes, base or no # base will use ubuntu as its base # default is to use fix derivative : base # Some repositories only support LTS # Default is false ltsonly : false # Save .list file as # Mandatory # Do not include .list it will be added automatically name : google-chrome","title":"Proposed Changes"},{"location":"drafts/proposed-changes/#proposed-changes","text":"","title":"Proposed Changes"},{"location":"drafts/proposed-changes/#apt-config-for-adding-generic-apt-repos","text":"Not yet in stable. There is no plan to remove Google Chrome ROS VSCode Docker Spotify Skype Google Cloud from apt-repo configs. they will be supported with single entry config via add_repo.<id> . However following may be removed in the future versions as they are not supported properly by their vendors and often require some tweaks or for other reasons. You can add them via new apt_sources config if you want. InSync Duo Security GCSFUSE(hasn't been updated since bionic) apt_sources : # Comment, This will show in software properties - comment : Google Chrome # GPG key Can be URL or a GPG key # Keys will be retrieved from Ubuntu key-server. key_url : key_id : # URL for repo # Variable interpolation is possible # Following variables are supported # CODE_NAME for release codename eg. bionic # DISTRO_NAME for name of the distribution eg.ubuntu source : # Additional architecture support armhf : true i386 : false arm64 : true # Supports Debian # Should be a bool # Default is true debian : true # Supports Derivatives like mint? # Can be yes, base or no # base will use ubuntu as its base # default is to use fix derivative : base # Some repositories only support LTS # Default is false ltsonly : false # Save .list file as # Mandatory # Do not include .list it will be added automatically name : google-chrome","title":"APT config for adding generic apt repos"},{"location":"faq/debug/","text":"Debugging the script \u00b6 You can chose from multiple debug modes. by setting DEBUG variable to one of the following DEBUG=1 Print debug messages DEBUG=internal display some internal debug messages DEBUG=trace Print debug, internal and also apt logs. Please note that This can generate a lot of output. Local testing \u00b6 You can use ./tests/distro-local.sh to test the scripts locally. It uses docker to build and test the script in simulate mode inside containers. This script requires two arguments distro name and release name . They are used as parameters to build the Docker image from dockerfile in dockerfiles/tests .eg.to test the script on Ubuntu 18.04 bionic, run it as ./tests/distro-local.sh ubuntu bionic . Alternatively you can build the docker image yourself. $ export distro = \"ubuntu\" $ export release = \"bionic\" $ docker build -t ae: \" ${ distro } - ${ release } \" \\ --build-arg DISTRO = \" ${ distro } \" \\ --build-arg CODE_NAME = \" ${ release } \" \\ ./tests/docker $ docker run -it -v $( pwd ) /after-effects:/shared/after-effects:ro \\ -v $( pwd ) /config/:/shared/config:ro \\ ae:ubuntu-bionic root@a9f6bf377494:/shared# DEBUG = 1 ./after-effects -c config/default.yml -s -H [ Checking ] Permissions... [ DEBUG ] Initialize logging [ Success ] OK! running as root. [ DEBUG ] Architecture is 64 bit. [ Info ] Using custom config file [ Simulating ] is set to true [ Info ] YAML config will not be displayed. [ Info ] Checking dependencies... [ Notice ] Following details are recognized by the Script. [ Info ] Hostname: a9f6bf377494 [ Info ] UUID for Run: a8ce9e69-b967-4a59-841f-e317f0d18d25 [ Info ] Distro: ubuntu ....... Tip This assumes that you can run docker without using sudo. Add yourself yo docker group or refer to docker documentation for more info. Documentation \u00b6 Docs are built using mkdocs. If you spot a mistake or a typo, you can submit a Pull request to fix it. You can test the docs locally with provided docker-compose file. docker-compose build docker-compose up and navigate to localhost:8000 to view the documentation.","title":"Debugging"},{"location":"faq/debug/#debugging-the-script","text":"You can chose from multiple debug modes. by setting DEBUG variable to one of the following DEBUG=1 Print debug messages DEBUG=internal display some internal debug messages DEBUG=trace Print debug, internal and also apt logs. Please note that This can generate a lot of output.","title":"Debugging the script"},{"location":"faq/debug/#local-testing","text":"You can use ./tests/distro-local.sh to test the scripts locally. It uses docker to build and test the script in simulate mode inside containers. This script requires two arguments distro name and release name . They are used as parameters to build the Docker image from dockerfile in dockerfiles/tests .eg.to test the script on Ubuntu 18.04 bionic, run it as ./tests/distro-local.sh ubuntu bionic . Alternatively you can build the docker image yourself. $ export distro = \"ubuntu\" $ export release = \"bionic\" $ docker build -t ae: \" ${ distro } - ${ release } \" \\ --build-arg DISTRO = \" ${ distro } \" \\ --build-arg CODE_NAME = \" ${ release } \" \\ ./tests/docker $ docker run -it -v $( pwd ) /after-effects:/shared/after-effects:ro \\ -v $( pwd ) /config/:/shared/config:ro \\ ae:ubuntu-bionic root@a9f6bf377494:/shared# DEBUG = 1 ./after-effects -c config/default.yml -s -H [ Checking ] Permissions... [ DEBUG ] Initialize logging [ Success ] OK! running as root. [ DEBUG ] Architecture is 64 bit. [ Info ] Using custom config file [ Simulating ] is set to true [ Info ] YAML config will not be displayed. [ Info ] Checking dependencies... [ Notice ] Following details are recognized by the Script. [ Info ] Hostname: a9f6bf377494 [ Info ] UUID for Run: a8ce9e69-b967-4a59-841f-e317f0d18d25 [ Info ] Distro: ubuntu ....... Tip This assumes that you can run docker without using sudo. Add yourself yo docker group or refer to docker documentation for more info.","title":"Local testing"},{"location":"faq/debug/#documentation","text":"Docs are built using mkdocs. If you spot a mistake or a typo, you can submit a Pull request to fix it. You can test the docs locally with provided docker-compose file. docker-compose build docker-compose up and navigate to localhost:8000 to view the documentation.","title":"Documentation"},{"location":"faq/dependencies/","text":"Dependencies \u00b6 What do I need to run this \u00b6 Usually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses, unless you are running this on Ubuntu docker image. Core dependencies \u00b6 The script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1. Install Dependencies sudo apt-get install -y --no-install-recommends whiptail coreutils iputils-ping procps wget whiptail , to display the menu. coreutils cut, tr, grep etc. wget , to get deb packages, report stats, get version information. iputils-ping , to test connectivity. procps to check running processes awk , sed to parse configs bash (4.x) Note on Debian Debian releases, [especially in docker] images sometimes do not have ps binary from procps pre installed. Please install the dependency packages before running the script. Additional packages installed \u00b6 Some tasks might install packages automatically, which are required to perform certain actions. Additional APT packages installed Some apt packages will be installed automatically, as they are necessary to perform selected tasks. For repository related tasks \u00b6 apt-transport-https ca-certificates curl gnupg2 software-properties-common For installing python packages \u00b6 python-pip (for python 2) python3-pip (for python 3) For resetting repositories \u00b6 ppa-purge Additional dependencies of these packages will also be installed.","title":"Dependencies"},{"location":"faq/dependencies/#dependencies","text":"","title":"Dependencies"},{"location":"faq/dependencies/#what-do-i-need-to-run-this","text":"Usually nothing extra! Your base Ubuntu install comes with all the commands/utilities this script uses, unless you are running this on Ubuntu docker image.","title":"What do I need to run this"},{"location":"faq/dependencies/#core-dependencies","text":"The script depends on following utilities which are usually present on a typical Ubuntu/Ubuntu based installation. If these packages are not installed, script will exit with error code 1. Install Dependencies sudo apt-get install -y --no-install-recommends whiptail coreutils iputils-ping procps wget whiptail , to display the menu. coreutils cut, tr, grep etc. wget , to get deb packages, report stats, get version information. iputils-ping , to test connectivity. procps to check running processes awk , sed to parse configs bash (4.x) Note on Debian Debian releases, [especially in docker] images sometimes do not have ps binary from procps pre installed. Please install the dependency packages before running the script.","title":"Core dependencies"},{"location":"faq/dependencies/#additional-packages-installed","text":"Some tasks might install packages automatically, which are required to perform certain actions. Additional APT packages installed Some apt packages will be installed automatically, as they are necessary to perform selected tasks.","title":"Additional packages installed"},{"location":"faq/dependencies/#for-repository-related-tasks","text":"apt-transport-https ca-certificates curl gnupg2 software-properties-common","title":"For repository related tasks"},{"location":"faq/dependencies/#for-installing-python-packages","text":"python-pip (for python 2) python3-pip (for python 3)","title":"For installing python packages"},{"location":"faq/dependencies/#for-resetting-repositories","text":"ppa-purge Additional dependencies of these packages will also be installed.","title":"For resetting repositories"},{"location":"faq/distros/","text":"Supported Distros \u00b6 In short? Ubuntu, its official flavors (Kubuntu,Ubuntu Mate etc), Linux Mint and Elementary. I have not tested the script on following distros, but since they use ubuntu as their base, It should work fine. But no promises. Warning! Script will exit, if it cannot recognize the distribution. A Complete list of supported distributions is given below. Distribution Code name/Version Supported Notes Ubuntu 20.04 Focal Fossa Yes Ubuntu 19.10 Eoan Ermine Yes Ubuntu 18.04 Bionic Beaver Yes Ubuntu 16.04 Xenial Xerus Yes Linux Mint 18 Sarah Yes Linux-Mint 18.1 Serena Yes Linux-Mint 18.2 Sonya Yes Linux-Mint 18.3 Sylvia Yes Linux Mint 19 Tara Yes Linux Mint 19.1 Tessa Yes Not tested Linux Mint 19.2 Tina Yes Not tested Linux Mint 19.3 Tricia Yes Not tested Debian 8 Jessie Yes Not tested Debian 9 Stretch Yes Debian 10 Buster Yes MX Linux 19 (Buster) Yes Not tested Elementary-OS 0.4 Loki Yes Not tested Elementary-OS 5.0 Juno Yes Not tested Elementary-OS 5.1 Hera Yes Tested Budgie Remix Ubuntu 16.04 Yes PoP! OS *Ubuntu releases Yes Not tested Linux-Lite 3.X Yes (Based on Ubuntu 16.04) Bodhi Linux 4 Yes (Based on Ubuntu 16.04) Bodhi Linux 5 Yes (Based on Ubuntu 18.04) KDE Neon Based on Ubuntu LTS Might be buggy Not Tested Peppermint 9,10 Based on Ubuntu 18.04 Yes Not Tested Peppermint 8 Based on Ubuntu 16.04 Yes Not tested Pre-Release and development builds Support for Pre-release builds, experimental and things might break. It is strongly advised to use them in a chroot or a in a VM and not as a daily driver.","title":"Distros"},{"location":"faq/distros/#supported-distros","text":"In short? Ubuntu, its official flavors (Kubuntu,Ubuntu Mate etc), Linux Mint and Elementary. I have not tested the script on following distros, but since they use ubuntu as their base, It should work fine. But no promises. Warning! Script will exit, if it cannot recognize the distribution. A Complete list of supported distributions is given below. Distribution Code name/Version Supported Notes Ubuntu 20.04 Focal Fossa Yes Ubuntu 19.10 Eoan Ermine Yes Ubuntu 18.04 Bionic Beaver Yes Ubuntu 16.04 Xenial Xerus Yes Linux Mint 18 Sarah Yes Linux-Mint 18.1 Serena Yes Linux-Mint 18.2 Sonya Yes Linux-Mint 18.3 Sylvia Yes Linux Mint 19 Tara Yes Linux Mint 19.1 Tessa Yes Not tested Linux Mint 19.2 Tina Yes Not tested Linux Mint 19.3 Tricia Yes Not tested Debian 8 Jessie Yes Not tested Debian 9 Stretch Yes Debian 10 Buster Yes MX Linux 19 (Buster) Yes Not tested Elementary-OS 0.4 Loki Yes Not tested Elementary-OS 5.0 Juno Yes Not tested Elementary-OS 5.1 Hera Yes Tested Budgie Remix Ubuntu 16.04 Yes PoP! OS *Ubuntu releases Yes Not tested Linux-Lite 3.X Yes (Based on Ubuntu 16.04) Bodhi Linux 4 Yes (Based on Ubuntu 16.04) Bodhi Linux 5 Yes (Based on Ubuntu 18.04) KDE Neon Based on Ubuntu LTS Might be buggy Not Tested Peppermint 9,10 Based on Ubuntu 18.04 Yes Not Tested Peppermint 8 Based on Ubuntu 16.04 Yes Not tested Pre-Release and development builds Support for Pre-release builds, experimental and things might break. It is strongly advised to use them in a chroot or a in a VM and not as a daily driver.","title":"Supported Distros"},{"location":"faq/errors/","text":"Errors \u00b6 GCSFUSE, ROS and Duo Security Repositories \u00b6 Note for 18.10+ users: GCSFuse is not available. Please see this Github issue for a fix. Duo Security for unix is only supported on some LTS releases. ROS is only supported on select releases. What if I get an error saying Unknown Distribution/Release? \u00b6 That usually means you are running a Distribution which is not supported, too old or a derivative which is not recognized by the script. consider opening an issue on GitHub. What if I get an error saying this release of Ubuntu is no longer supported? \u00b6 [ Derivatives ] Checking... [ EOL ] This version of Ubuntu is no longer supported. [ EOL ] Ubuntu 19.04 reached EOL on January 23rd, 2020. _______________________________________________________ Exit code is 12 You are using a version of Ubuntu/Debian which is EOL. Please update to supported version of Ubuntu/Debian. Ubuntu ESM versions are considered as EOL SSL Errors \u00b6 [ Error! ] Something went wrong while retrieving /tmp/api-version.yml. [ Error! ] Error Getting file. Try running wget https://ae.prasadt.com/v2/version . If you see SSL errors, that means that your CA bundle is out of date. This project uses Amazon Root CA & LetsEncrypt for SSL, make sure that your system trusts these certificate authorities.. Something not mentioned above \u00b6 Report Well, that shouldn't have happened. Please open an issue on Github . Tip In extremely rare cases where your script exited while installing a package, which has unmet dependencies, you might see broken packages error. In that case, run sudo apt-get install -f to fix the broken packages and run the script again.","title":"Errors"},{"location":"faq/errors/#errors","text":"","title":"Errors"},{"location":"faq/errors/#gcsfuse-ros-and-duo-security-repositories","text":"Note for 18.10+ users: GCSFuse is not available. Please see this Github issue for a fix. Duo Security for unix is only supported on some LTS releases. ROS is only supported on select releases.","title":"GCSFUSE, ROS and Duo Security Repositories"},{"location":"faq/errors/#what-if-i-get-an-error-saying-unknown-distributionrelease","text":"That usually means you are running a Distribution which is not supported, too old or a derivative which is not recognized by the script. consider opening an issue on GitHub.","title":"What if I get an error saying Unknown Distribution/Release?"},{"location":"faq/errors/#what-if-i-get-an-error-saying-this-release-of-ubuntu-is-no-longer-supported","text":"[ Derivatives ] Checking... [ EOL ] This version of Ubuntu is no longer supported. [ EOL ] Ubuntu 19.04 reached EOL on January 23rd, 2020. _______________________________________________________ Exit code is 12 You are using a version of Ubuntu/Debian which is EOL. Please update to supported version of Ubuntu/Debian. Ubuntu ESM versions are considered as EOL","title":"What if I get an error saying this release of Ubuntu is no longer supported?"},{"location":"faq/errors/#ssl-errors","text":"[ Error! ] Something went wrong while retrieving /tmp/api-version.yml. [ Error! ] Error Getting file. Try running wget https://ae.prasadt.com/v2/version . If you see SSL errors, that means that your CA bundle is out of date. This project uses Amazon Root CA & LetsEncrypt for SSL, make sure that your system trusts these certificate authorities..","title":"SSL Errors"},{"location":"faq/errors/#something-not-mentioned-above","text":"Report Well, that shouldn't have happened. Please open an issue on Github . Tip In extremely rare cases where your script exited while installing a package, which has unmet dependencies, you might see broken packages error. In that case, run sudo apt-get install -f to fix the broken packages and run the script again.","title":"Something not mentioned above"},{"location":"faq/exit-codes/","text":"Exit Codes \u00b6 Exit Codes Reason 1- 10 Script cannot run on the system 1 Dependencies are not met 2 Script not running as root 8 Remote get operation failed. 5 Failed to determine version of release. is /etc/os-release file missing? 10-19 Not Running with right configuration or internal flags 11 Unsupported Architecture 12 End of Life release 14 No Internet connection 15 Conflicting apps are running 16 Distribution is Not supported 17 Distribution is not yet supported. But will be in the future. 19 Internal Functions: Invalid arguments 20- 254 User configuration / Run-time errors 20 Purge function is called without -d flag 21 Failed to install dependencies 22 Invalid flag passed 23 Invalid argument position. 24 Not Running the latest version 25 Incompatible arguments 26 Option is obsolete 28 Getting API response failed 29 Stat reporting failed 35 Not a valid config file type 36 file defined does not exist/not accessible 37 Configuration error. Expects Boolean but found something else. 38 Failed to delete a file 39 Custom remote config name cannot be empty 40 Failed to unset an array 41 DEPRECATED_EXIT_CODE 51 GPG signature checks failed 52 SHA checksums did not match 53 List mode is no longer supported. 54 not running with autopilot when terminal is non interactive. 61 apt-get update failed with some warnings or errors 62 Yq checksum verification failed 255 Test Exit code","title":"Exit Codes"},{"location":"faq/exit-codes/#exit-codes","text":"Exit Codes Reason 1- 10 Script cannot run on the system 1 Dependencies are not met 2 Script not running as root 8 Remote get operation failed. 5 Failed to determine version of release. is /etc/os-release file missing? 10-19 Not Running with right configuration or internal flags 11 Unsupported Architecture 12 End of Life release 14 No Internet connection 15 Conflicting apps are running 16 Distribution is Not supported 17 Distribution is not yet supported. But will be in the future. 19 Internal Functions: Invalid arguments 20- 254 User configuration / Run-time errors 20 Purge function is called without -d flag 21 Failed to install dependencies 22 Invalid flag passed 23 Invalid argument position. 24 Not Running the latest version 25 Incompatible arguments 26 Option is obsolete 28 Getting API response failed 29 Stat reporting failed 35 Not a valid config file type 36 file defined does not exist/not accessible 37 Configuration error. Expects Boolean but found something else. 38 Failed to delete a file 39 Custom remote config name cannot be empty 40 Failed to unset an array 41 DEPRECATED_EXIT_CODE 51 GPG signature checks failed 52 SHA checksums did not match 53 List mode is no longer supported. 54 not running with autopilot when terminal is non interactive. 61 apt-get update failed with some warnings or errors 62 Yq checksum verification failed 255 Test Exit code","title":"Exit Codes"}]}